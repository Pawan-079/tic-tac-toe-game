{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pkg73\\\\OneDrive\\\\Documents\\\\GitHub\\\\tic-tac-toe-game\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Board from './Board';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [board, setBoard] = useState(Array(9).fill(null));\n  const [isXNext, setIsXNext] = useState(true);\n  const [isComputer, setIsComputer] = useState(true); // Toggle for computer player\n  const [winner, setWinner] = useState(null);\n  const [gameStatus, setGameStatus] = useState('Your Chance'); // Default message\n\n  const calculateWinner = squares => {\n    const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n    for (let line of lines) {\n      const [a, b, c] = line;\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        return squares[a];\n      }\n    }\n    return null;\n  };\n  const handleClick = index => {\n    if (winner || board[index]) return;\n    const newBoard = board.slice();\n    newBoard[index] = isXNext ? 'X' : 'O';\n    setBoard(newBoard);\n    setIsXNext(!isXNext);\n    setGameStatus(isXNext ? \"Computer's Chance\" : 'Your Chance');\n  };\n  const resetGame = () => {\n    setBoard(Array(9).fill(null));\n    setIsXNext(true);\n    setWinner(null);\n    setGameStatus('Your Chance');\n  };\n\n  // Function for the computer to make a move\n  const computerMove = () => {\n    if (!isXNext && isComputer) {\n      const emptySquares = board.map((val, idx) => val === null ? idx : null).filter(val => val !== null);\n      const bestMove = minimax(board, 'O').index;\n      if (emptySquares.length > 0) {\n        handleClick(bestMove);\n      }\n    }\n  };\n\n  // Minimax algorithm for computer's best move\n  const minimax = (newBoard, player) => {\n    const availableSpots = newBoard.map((val, idx) => val === null ? idx : null).filter(val => val !== null);\n    const huPlayer = 'X';\n    const aiPlayer = 'O';\n    if (calculateWinner(newBoard) === huPlayer) return {\n      score: -10\n    };\n    if (calculateWinner(newBoard) === aiPlayer) return {\n      score: 10\n    };\n    if (availableSpots.length === 0) return {\n      score: 0\n    };\n    const moves = [];\n    for (let i = 0; i < availableSpots.length; i++) {\n      const move = {};\n      move.index = availableSpots[i];\n      newBoard[availableSpots[i]] = player;\n      if (player === aiPlayer) {\n        const result = minimax(newBoard, huPlayer);\n        move.score = result.score;\n      } else {\n        const result = minimax(newBoard, aiPlayer);\n        move.score = result.score;\n      }\n      newBoard[availableSpots[i]] = null;\n      moves.push(move);\n    }\n    let bestMove;\n    if (player === aiPlayer) {\n      let bestScore = -Infinity;\n      for (let i = 0; i < moves.length; i++) {\n        if (moves[i].score > bestScore) {\n          bestScore = moves[i].score;\n          bestMove = i;\n        }\n      }\n    } else {\n      let bestScore = Infinity;\n      for (let i = 0; i < moves.length; i++) {\n        if (moves[i].score < bestScore) {\n          bestScore = moves[i].score;\n          bestMove = i;\n        }\n      }\n    }\n    return moves[bestMove];\n  };\n  useEffect(() => {\n    const winner = calculateWinner(board);\n    if (winner) {\n      setWinner(winner);\n      setGameStatus(winner === 'X' ? 'You Win!' : 'Computer Wins!');\n      alert(winner === 'X' ? 'You Win!' : 'Computer Wins!');\n    } else if (!board.includes(null)) {\n      setGameStatus('Draw Game');\n      alert('Draw Game!');\n    } else if (!isXNext && isComputer) {\n      computerMove();\n    }\n  }, [board]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Tic-Tac-Toe\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Board, {\n      squares: board,\n      onClick: handleClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"info\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: gameStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetGame,\n        children: \"Restart Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"2wkjLdnXYY7istbDANxBj1aYAFM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Board","jsxDEV","_jsxDEV","App","_s","board","setBoard","Array","fill","isXNext","setIsXNext","isComputer","setIsComputer","winner","setWinner","gameStatus","setGameStatus","calculateWinner","squares","lines","line","a","b","c","handleClick","index","newBoard","slice","resetGame","computerMove","emptySquares","map","val","idx","filter","bestMove","minimax","length","player","availableSpots","huPlayer","aiPlayer","score","moves","i","move","result","push","bestScore","Infinity","alert","includes","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/pkg73/OneDrive/Documents/GitHub/tic-tac-toe-game/src/App.js"],"sourcesContent":["\r\nimport React, { useState, useEffect } from 'react';\r\nimport Board from './Board';\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n  const [board, setBoard] = useState(Array(9).fill(null));\r\n  const [isXNext, setIsXNext] = useState(true);\r\n  const [isComputer, setIsComputer] = useState(true); // Toggle for computer player\r\n  const [winner, setWinner] = useState(null);\r\n  const [gameStatus, setGameStatus] = useState('Your Chance'); // Default message\r\n\r\n  const calculateWinner = (squares) => {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n    for (let line of lines) {\r\n      const [a, b, c] = line;\r\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n        return squares[a];\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const handleClick = (index) => {\r\n    if (winner || board[index]) return;\r\n\r\n    const newBoard = board.slice();\r\n    newBoard[index] = isXNext ? 'X' : 'O';\r\n    setBoard(newBoard);\r\n    setIsXNext(!isXNext);\r\n    setGameStatus(isXNext ? \"Computer's Chance\" : 'Your Chance');\r\n  };\r\n\r\n  const resetGame = () => {\r\n    setBoard(Array(9).fill(null));\r\n    setIsXNext(true);\r\n    setWinner(null);\r\n    setGameStatus('Your Chance');\r\n  };\r\n\r\n  // Function for the computer to make a move\r\n  const computerMove = () => {\r\n    if (!isXNext && isComputer) {\r\n      const emptySquares = board.map((val, idx) => val === null ? idx : null).filter(val => val !== null);\r\n      const bestMove = minimax(board, 'O').index;\r\n      if (emptySquares.length > 0) {\r\n        handleClick(bestMove);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Minimax algorithm for computer's best move\r\n  const minimax = (newBoard, player) => {\r\n    const availableSpots = newBoard.map((val, idx) => val === null ? idx : null).filter(val => val !== null);\r\n    const huPlayer = 'X';\r\n    const aiPlayer = 'O';\r\n\r\n    if (calculateWinner(newBoard) === huPlayer) return { score: -10 };\r\n    if (calculateWinner(newBoard) === aiPlayer) return { score: 10 };\r\n    if (availableSpots.length === 0) return { score: 0 };\r\n\r\n    const moves = [];\r\n\r\n    for (let i = 0; i < availableSpots.length; i++) {\r\n      const move = {};\r\n      move.index = availableSpots[i];\r\n      newBoard[availableSpots[i]] = player;\r\n\r\n      if (player === aiPlayer) {\r\n        const result = minimax(newBoard, huPlayer);\r\n        move.score = result.score;\r\n      } else {\r\n        const result = minimax(newBoard, aiPlayer);\r\n        move.score = result.score;\r\n      }\r\n\r\n      newBoard[availableSpots[i]] = null;\r\n      moves.push(move);\r\n    }\r\n\r\n    let bestMove;\r\n    if (player === aiPlayer) {\r\n      let bestScore = -Infinity;\r\n      for (let i = 0; i < moves.length; i++) {\r\n        if (moves[i].score > bestScore) {\r\n          bestScore = moves[i].score;\r\n          bestMove = i;\r\n        }\r\n      }\r\n    } else {\r\n      let bestScore = Infinity;\r\n      for (let i = 0; i < moves.length; i++) {\r\n        if (moves[i].score < bestScore) {\r\n          bestScore = moves[i].score;\r\n          bestMove = i;\r\n        }\r\n      }\r\n    }\r\n\r\n    return moves[bestMove];\r\n  };\r\n\r\n  useEffect(() => {\r\n    const winner = calculateWinner(board);\r\n    if (winner) {\r\n      setWinner(winner);\r\n      setGameStatus(winner === 'X' ? 'You Win!' : 'Computer Wins!');\r\n      alert(winner === 'X' ? 'You Win!' : 'Computer Wins!');\r\n    } else if (!board.includes(null)) {\r\n      setGameStatus('Draw Game');\r\n      alert('Draw Game!');\r\n    } else if (!isXNext && isComputer) {\r\n      computerMove();\r\n    }\r\n  }, [board]);\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <h1>Tic-Tac-Toe</h1>\r\n      <Board squares={board} onClick={handleClick} />\r\n      <div className=\"info\">\r\n        <p>{gameStatus}</p>\r\n        <button onClick={resetGame}>Restart Game</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}